************Data Collection and Sensor Interface***********


import RPi.GPIO as GPIO
import time

# Set GPIO mode to BCM
GPIO.setmode(GPIO.BCM)

# Define GPIO pins for the sensor
TRIGGER_PIN = 18
ECHO_PIN = 24

# Set up GPIO pins
GPIO.setup(TRIGGER_PIN, GPIO.OUT)
GPIO.setup(ECHO_PIN, GPIO.IN)

# Function to trigger a distance measurement
def trigger_measurement():
    GPIO.output(TRIGGER_PIN, True)
    time.sleep(0.00001)
    GPIO.output(TRIGGER_PIN, False)

# Function to measure the distance
def measure_distance():
    pulse_start = time.time()
    pulse_end = time.time()

    while GPIO.input(ECHO_PIN) == 0:
        pulse_start = time.time()

    while GPIO.input(ECHO_PIN) == 1:
        pulse_end = time.time()

    pulse_duration = pulse_end - pulse_start
    distance = (pulse_duration * 34300) / 2  # Speed of sound is 343 m/s

    return distance


****************Data Transmission to the Cloud/Mobile App Server*****************
import requests

# Define the server endpoint for data transmission
SERVER_ENDPOINT = "http://example.com/api/parking"

# Main loop for data collection and transmission
try:
    while True:
        # Trigger a distance measurement
        trigger_measurement()

        # Measure the distance
        distance = measure_distance()

        # Send data to the server
        data = {"distance": distance}
        response = requests.post(SERVER_ENDPOINT, json=data)

        if response.status_code == 200:
            print(f"Data sent: Distance - {distance} cm")
        else:
            print("Data transmission failed")

        # Adjust the data collection and transmission interval
        time.sleep(5)

except KeyboardInterrupt:
    print("Data collection stopped by the user")

finally:
    # Clean up GPIO settings
    GPIO.cleanup()
